@using NuGet.Protocol
@* catches model and makes it accessible to razor page via @Model *@
@model CombinedPractiseResultsModel;
@{
    Layout = "_Layout";
    ViewData["Title"] = "Practise";
}
<div class="flex flex-col gap-4 p-4 w-full items-center">
    <p id="Question">Question</p>
    <input type="text" placeholder="Answer" id="answer" class="input input-bordered w-full max-w-xs" />
    <button class="btn btn-secondary" id="answer-button">Enter answer</button>
</div>
<form method="post" asp-controller="Practise" asp-action="Session">
    <input id="result" name="result" asp-for="ResultObj.Result"  />
    <input id="submit-button" type="submit" value="pass to backend" style=""/>
    
</form>

<script
  src="https://code.jquery.com/jquery-3.7.1.min.js"
  integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo="
  crossorigin="anonymous"></script>
<script type="text/javascript">
    
    // a function that generates a random integer between maximumValue and minimumValue inclusive
    
    function getRandomInteger(minimumValue, maximumValue) {
        return Math.floor(Math.random() * (maximumValue - minimumValue + 1) ) + minimumValue;
    }
    
    let enterPressed = false;
            let userAnswer = 0;
            
            $(document).keyup(function (keyInput) {
                if (keyInput.keyCode === 13) {
                    userAnswer = document.getElementById("answer").value;
                    enterPressed = true;
                }
            });
    
    // make sure to add a javascript comment to explain what the class does in proper formatting and look into unit testing
    // need to allow customisation of the test 
    class Test {
        constructor(testLength, difficulty, operation) {
            this.testLength = testLength; // stores number of questions
            this.difficulty = difficulty.toLowerCase(); // stores difficulty enum
            this.operation = operation.toLowerCase(); // tells you which operation is used in the questions
            this.testScore = 0; // stores the score of the test when user completes it
            this.operands = []; // stores all the operands that will appear in the test
            this.secondaryOperands = []; // stores all the secondary operands if the calculation needs it 
            // e.g. multiplication, division, addition, subtraction
            this.answers = []; // stores all the answers to the questions
            this.currentQuestion = 1;
        }
    
        generateTest() {
            switch(this.operation) {
                // different operations require different methods
                // switch statement easier to read then if else
                // case "addition":
                //     this.generateAdditionTest();
                //     break;
                // case "subtraction":
                //     this.generateSubtractionTest();
                //     break;
                case "multiplication":
                    this.generateMultiplicationTest();
                    break;
                // case "division":
                //     this.generateDivisionTest();
                //     break;
                // case "squaring":
                //     this.generateSquaringTest();
                //     break;
                // case "squareRoot":
                //     this.generateSquareRootTest();
                //     break;
                // no other cases match? this is outputted to the console
                default:
                    console.log("Invalid operation");
            }
    
        }
        
        async runMultiplicationTest() {
            for (let i = 0; i < this.testLength; i++) {
                document.getElementById("Question").innerHTML = this.operands[i] + " x " + this.secondaryOperands[i] + ":";
        
                const answerPromise = new Promise(resolve => {
                    var checkEnter = setInterval(function() {
                        if (enterPressed) {
                            resolve();
                            this.currentQuestion += 1;
                            enterPressed = false;
                            clearInterval(checkEnter);
                        }
                    }, 100);
                });
        
                await answerPromise;
        
                document.getElementById("answer").value = "";
        
                if (Number(userAnswer) === Number(this.answers[i])) {
                    console.log("Correct!");
                    this.testScore++;
                }
                else {
                    console.log("Incorrect, answer is " + this.answers[i]);
                }
            }
        
            console.log("Test complete! Your score is: " + this.testScore + "/" + this.testLength);
            return this.testScore; // Return the test score when the test is complete
        }
        
        // async runMultiplicationTest() {
        //     for (let i = 0; i < this.testLength; i++) {
        //         document.getElementById("Question").innerHTML = this.operands[i] + " x " + this.secondaryOperands[i] + ":";
        //
        //         // a promise that is resolved when the enter key is pressed 
        //         const answerPromise = new Promise(resolve => {
        //             // setInterval(function, 100) means enter key is checked for every 100ms
        //             var checkEnter = setInterval(function() {
        //                 if (enterPressed) {
        //                     resolve();
        //                     this.currentQuestion += 1;
        //                     // enterPressed reset for the next question
        //                     enterPressed = false;  
        //                     clearInterval(checkEnter);  // Stop checking for the Enter key
        //                 }
        //             }, 100);  
        //         });
        //
        //         // Wait for the Promise to resolve (i.e., the Enter key to be pressed)
        //         await answerPromise;
        //
        //         document.getElementById("answer").value = "";
        //
        //         if (Number(userAnswer) === Number(this.answers[i])) {
        //             console.log("Correct!");
        //             this.testScore++;
        //         }
        //         else {
        //             console.log("Incorrect, answer is " + this.answers[i]);
        //         }
        //     }
        //    
        //     console.log("Test complete! Your score is: " + this.testScore + "/" + this.testLength);
        //    
        //    
        //         // .then(function(response) {
        //         //     // success
        //         // }, 
        //         //  function(response) { // optional
        //         //     // failed
        //         // });
        // }
        // async runMultiplicationTest() {
        //     let userAnswer = 0;
        //     for (let i = 0; i < this.testLength; i++) {
        //         document.getElementById("Question").innerHTML = this.operands[i] + " x " + this.secondaryOperands[i] + ":";
        //
        //         // Create a new Promise that resolves when the button is clicked
        //         const answerPromise = new Promise(resolve => {
        //             var button = document.getElementById("answer-button");
        //             $(document).keyup(function (keyInput) {
        //                 if (keyInput.keyCode === 13) {
        //                     userAnswer = document.getElementById("answer").value;
        //                     resolve();
        //                     }
        //                 });
        //             // button.addEventListener("click", function() {
        //             //     userAnswer = document.getElementById("answer").value;
        //             //     resolve();  // Resolve the Promise
        //             // });
        //         });
        //
        //         // Wait for the Promise to resolve (i.e., the button to be clicked)
        //         await answerPromise;
        //        
        //         document.getElementById("answer").value = "";
        //        
        //         if (Number(userAnswer) === Number(this.answers[i])) {
        //             console.log("Correct!");
        //             this.testScore++;
        //         }
        //         else {
        //             console.log("Incorrect, answer is " + this.answers[i]);
        //         }
        //     }
        //     console.log("Test complete! Your score is: " + this.testScore + "/" + this.testLength);
        // }
        // runMultiplicationTest() {
        //     let userAnswer = 0;
        //     // loops through the number of questions specified by testLength and prints out the questions
        //     for (let i = 0; i < this.testLength; i++) {
        //         // prints out question
        //         // console.log(this.operands[i] + " x " + this.secondaryOperands[i] + ":");
        //         // changes content of question paragraph tag dynamically to show question the user 
        //         document.getElementById("Question").innerHTML = this.operands[i] + " x " + this.secondaryOperands[i] + ":";
        //         var button = document.getElementById("answer-button");
        //         button.addEventListener("click", function() {
        //             userAnswer = document.getElementById("answer").value;
        //         });
        //         // user inputs their answer
        //         // userAnswer = prompt(this.operands[i] + " x " + this.secondaryOperands[i] + ":");
        //         // checks if answer is correct
        //         if (Number(userAnswer) === Number(this.answers[i])) {
        //             console.log("Correct!");
        //             this.testScore++;
        //         }
        //         else {
        //             console.log("Incorrect, answer is " + this.answers[i]);
        //
        //         }
        //     }
        //     console.log("Test complete! Your score is: " + this.testScore + "/" + this.testLength);
        // }
    
        generateMultiplicationTest() {
            switch(this.difficulty) {
                // operands are generated differently based on the difficulty
                case "easy":
                    // creates the number of questions specified by testLength
                    for (let i = 0; i < this.testLength; i++) {
                        // generates a random operand between 2 and 12 inclusive for all the questions and appends it to operands list
                        this.operands.push(getRandomInteger(2, 12));
                        // generates a random operand between 2 and 99 inclusive for all the questions and appends it to secondaryOperands list
                        this.secondaryOperands.push(getRandomInteger(2, 99));
                        // calculates the answer from the operands and appends it to the answers list
                        this.answers.push(this.operands[i] * this.secondaryOperands[i]);
                    }
           
                    break;
                // case "medium":
                //     break;
                // case "hard":
                //     break;
                // case "expert":
                //     break;
                default:
                    console.log("Invalid difficulty");
            }
        }
        //
        // generateAdditionTest() {
        //
        // }
        //
        // generateSquareRootTest() {
        //
        // }
        //
        // generateSquaringTest() {
        //
        // }
        //
        // generateSubtractionTest() {
        //
        // }
        //
        // generateDivisionTest() {
        //
        // }
    
    }
    // html.raw prevents html encoding of getting in the way of storing the JSON
    // converting practise model to json
    let testInfoJson = @Html.Raw(Model.Practise);
    console.log(testInfoJson);
    // creating an object of the Test class
    let firstTest = new Test(testInfoJson.Length, testInfoJson.Difficulty, testInfoJson.Operation);
    // running a multiplication test
    firstTest.generateMultiplicationTest();
    // when the multiplication test has finished running and the promise is fulfilled, this code executes
    firstTest.runMultiplicationTest().then(testScore => {
        console.log("Test should be finished");
        // result value in form updates to real value
        document.getElementById("result").value = testScore;
        // clicks the invisible button to send the form the backend
        document.getElementById("submit-button").click();
        // $.ajax({
        //         url: "/Practise/Session",
        //         type: "POST",
        //         data: testScore,
        //         success: function(response) {
        //             console.log("Success:", response);
        //         },
        //         error: function(error) {
        //             console.log("Error:", error);
        //         }
        //     });
        // document.getElementById("submit-button").click();
        // $.ajax({
        //     url: "/Home/",
        //     // data: testScore,
        //     type: "GET",
        // });
        // fetch("/Home/Index/")
        //     .then(response => {
        //         if (!response.ok) {
        //             throw new Error("HTTP error " + response.status);
        //         }
        //         return response.text();
        //     })
        //     .then(data => {
        //         console.log("Success:", data);
        //     })
        //     .catch(function(error) {
        //         console.log("Error:", error);
        //     });
    });
    
    // while (firstTest.currentQuestion < 3) {
    //     setTimeout(() => {  }, 10000);
    //     }
    // var result = firstTest.testScore;
    // console.log(result + " result works");
    // $.ajax({
    //     url: "/Practise/TestResults/",
    //     data: result, 
    //     type: "POST",
    //     });

     
    // const testFinishedPromise = new Promise (resolve => {
    //     var testCompleted = setInterval(function () {
    //         if (firstTest.currentQuestion === 3) {
    //             console.log("Current Question is " + firstTest.currentQuestion);
    //             resolve();
    //             clearInterval(testCompleted);
    //             }
    //        
    //         }, 100);
    //     });
    // async function waitToSendData() {
    //     console.log("Inside the function");
    //     await testFinishedPromise;
    //     var result = firstTest.testScore;
    //     console.log(result + " result works");
    //     $.ajax({
    //         url: "/Practise/TestResults/",
    //         data: result, 
    //         type: "POST",
    //         });
    //    
    //     }
    // waitToSendData();
    // firstTest.
    // $http({
    //      url: "Practise/TestResults/",
    //      method: "POST",
    //      data: firstTest.testScore 
    // })
    
</script>