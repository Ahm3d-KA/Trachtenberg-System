@using NuGet.Protocol
@* catches model and makes it accessible to razor page via @Model *@
@model string;
@{
    Layout = "_Layout";
    ViewData["Title"] = "Practise";
}
<div class="flex flex-col gap-4 p-4 w-full items-center">
    <p id="Question">Question</p>
    <input type="text" placeholder="Answer" id="answer" class="input input-bordered w-full max-w-xs" />
    <button class="btn btn-secondary" id="answer-button">Enter answer</button>
</div>


@* <script type="text/javascript" src="@Url.Content("/js/site.js")"></script> *@
<script type="text/javascript">
    // a function that generates a random integer between maximumValue and minimumValue inclusive
    
    function getRandomInteger(minimumValue, maximumValue) {
        return Math.floor(Math.random() * (maximumValue - minimumValue + 1) ) + minimumValue;
    }
    
    // make sure to add a javascript comment to explain what the class does in proper formatting and look into unit testing
    // need to allow customisation of the test 
    class Test {
        constructor(testLength, difficulty, operation) {
            this.testLength = testLength; // stores number of questions
            this.difficulty = difficulty.toLowerCase(); // stores difficulty enum
            this.operation = operation.toLowerCase(); // tells you which operation is used in the questions
            this.testScore = 0; // stores the score of the test when user completes it
            this.operands = []; // stores all the operands that will appear in the test
            this.secondaryOperands = []; // stores all the secondary operands if the calculation needs it 
            // e.g. multiplication, division, addition, subtraction
            this.answers = []; // stores all the answers to the questions
        }
    
        generateTest() {
            switch(this.operation) {
                // different operations require different methods
                // switch statement easier to read then if else
                // case "addition":
                //     this.generateAdditionTest();
                //     break;
                // case "subtraction":
                //     this.generateSubtractionTest();
                //     break;
                case "multiplication":
                    this.generateMultiplicationTest();
                    break;
                // case "division":
                //     this.generateDivisionTest();
                //     break;
                // case "squaring":
                //     this.generateSquaringTest();
                //     break;
                // case "squareRoot":
                //     this.generateSquareRootTest();
                //     break;
                // no other cases match? this is outputted to the console
                default:
                    console.log("Invalid operation");
            }
    
        }
        runMultiplicationTest() {
            let userAnswer = 0;
            // loops through the number of questions specified by testLength and prints out the questions
            for (let i = 0; i < this.testLength; i++) {
                // prints out question
                // console.log(this.operands[i] + " x " + this.secondaryOperands[i] + ":");
                // changes content of question paragraph tag dynamically to show question the user 
                document.getElementById("Question").innerHTML = this.operands[i] + " x " + this.secondaryOperands[i] + ":";
                var button = document.getElementById("answer-button");
                button.addEventListener("click", function() {
                    userAnswer = document.getElementById("answer").value;
                });
                // user inputs their answer
                // userAnswer = prompt(this.operands[i] + " x " + this.secondaryOperands[i] + ":");
                // checks if answer is correct
                if (Number(userAnswer) === Number(this.answers[i])) {
                    console.log("Correct!");
                    this.testScore++;
                }
                else {
                    console.log("Incorrect, answer is " + this.answers[i]);
    
                }
            }
            console.log("Test complete! Your score is: " + this.testScore + "/" + this.testLength);
        }
    
        generateMultiplicationTest() {
            switch(this.difficulty) {
                // operands are generated differently based on the difficulty
                case "easy":
                    // creates the number of questions specified by testLength
                    for (let i = 0; i < this.testLength; i++) {
                        // generates a random operand between 2 and 12 inclusive for all the questions and appends it to operands list
                        this.operands.push(getRandomInteger(2, 12));
                        // generates a random operand between 2 and 99 inclusive for all the questions and appends it to secondaryOperands list
                        this.secondaryOperands.push(getRandomInteger(2, 99));
                        // calculates the answer from the operands and appends it to the answers list
                        this.answers.push(this.operands[i] * this.secondaryOperands[i]);
                    }
                    this.runMultiplicationTest();
                    break;
                // case "medium":
                //     break;
                // case "hard":
                //     break;
                // case "expert":
                //     break;
                default:
                    console.log("Invalid difficulty");
            }
        }
        //
        // generateAdditionTest() {
        //
        // }
        //
        // generateSquareRootTest() {
        //
        // }
        //
        // generateSquaringTest() {
        //
        // }
        //
        // generateSubtractionTest() {
        //
        // }
        //
        // generateDivisionTest() {
        //
        // }
    
    }
    // html.raw prevents html encoding of getting in the way of storing the JSON
    let testInfoJson = @Html.Raw(Model);
    console.log(testInfoJson);
    // creating an object of the Test class
    let firstTest = new Test(testInfoJson.Length, testInfoJson.Difficulty, testInfoJson.Operation);
    // running a multiplication test
    firstTest.generateMultiplicationTest();
    
</script>